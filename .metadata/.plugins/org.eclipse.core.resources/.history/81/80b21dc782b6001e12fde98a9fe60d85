package com.myweb.www.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.myweb.www.security.MemberVO;
import com.myweb.www.service.MemberService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;


@RequestMapping("/member/*")
@RequiredArgsConstructor
@Slf4j
@Controller
public class MemberController {
	
	private final MemberService msv;
	
	private final BCryptPasswordEncoder bcEncoder;
	
	
	@GetMapping("/register")
	public void register() {}
	
	@GetMapping(value="/{email}", produces = MediaType.TEXT_PLAIN_VALUE)
	public ResponseEntity<String> confirm(@PathVariable("email") String email){
		log.info("★★★★★★★★ email ★★★★★★★★ >> {}", email);
		MemberVO mvo = msv.confirm(email);
		return (mvo == null)? new ResponseEntity<String>("1", HttpStatus.OK):
			new ResponseEntity<String>("0", HttpStatus.INTERNAL_SERVER_ERROR);
	
	}
	
	@PostMapping("/register")
	public String register(MemberVO mvo) {
		log.info("★★★★★★★★ mvo ★★★★★★★★ >> "+mvo);
		mvo.setPwd(bcEncoder.encode(mvo.getPwd()));
		int isOk = msv.register(mvo);
		return "index";
	}
	
	@GetMapping("/login")
	public void login() {}
	
	@PostMapping("/login")
	public String loginPost(HttpServletRequest request, RedirectAttributes re) {
		re.addAttribute("email", request.getAttribute("email"));
		re.addAttribute("errMsg", request.getAttribute("errMsg"));
		re.addFlashAttribute("fail_msg", "1");
		return "redirect:/member/login";
	}
	
	@GetMapping("/list")
	public void list(Model m) {
		List<MemberVO> list = msv.getList();
		m.addAttribute("list", list);
	}
	
	@GetMapping({"/detail", "/modify"})
	public void detail() {}
	
	@PostMapping("/modify")
	public String modify(MemberVO mvo, HttpServletRequest request, HttpServletResponse response, RedirectAttributes re) {
		log.info("mvo >>>>>> !@#!@#"+mvo);
		if(mvo.getPwd().length() > 0) {
			mvo.setPwd(bcEncoder.encode(mvo.getPwd()));
		}else {
			String email = mvo.getEmail();
			mvo.setPwd(msv.getPwd(email));
		}
		int isOk = msv.modify(mvo);
		re.addFlashAttribute("modify_msg", "1");
		logout(request, response);
		return "redirect:/member/login";
	}
	
	@GetMapping("/remove")
	public String remove(Principal p, HttpServletRequest request, HttpServletResponse response, RedirectAttributes re) {
		return "redirect:/member/login";
	}
	
	
	public void logout(HttpServletRequest req, HttpServletResponse res) {
		Authentication authentication = SecurityContextHolder
				.getContext().getAuthentication();
		new SecurityContextLogoutHandler().logout(req, res, authentication);
	}
	
	
	

}
